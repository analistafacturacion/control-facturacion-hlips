#!/usr/bin/env pwsh

# Script para gestionar duplicados en la base de datos de facturaci√≥n
# Uso: .\manage-duplicates.ps1

param(
    [Parameter()]
    [string]$Action = "detect",  # detect, remove-all, remove-specific
    
    [Parameter()]
    [string]$NumeroFactura = "",
    
    [Parameter()]
    [string]$BaseUrl = "https://control-facturacion-hlips.onrender.com/api/migration"
)

Write-Host "üîç Gesti√≥n de Duplicados - Control Facturaci√≥n" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan

switch ($Action.ToLower()) {
    "detect" {
        Write-Host "üîç Detectando duplicados..." -ForegroundColor Yellow
        
        try {
            $response = Invoke-WebRequest -Uri "$BaseUrl/detect-duplicates" -Method GET
            $data = $response.Content | ConvertFrom-Json
            
            if ($data.success) {
                Write-Host "‚úÖ Detecci√≥n completada!" -ForegroundColor Green
                Write-Host ""
                Write-Host "üìä ESTAD√çSTICAS:" -ForegroundColor White
                Write-Host "  ‚Ä¢ Duplicados por n√∫mero: $($data.statistics.duplicatesByNumber)" -ForegroundColor White
                Write-Host "  ‚Ä¢ Duplicados por clave: $($data.statistics.duplicatesByKey)" -ForegroundColor White
                Write-Host "  ‚Ä¢ Duplicados recientes (30 d√≠as): $($data.statistics.recentDuplicates)" -ForegroundColor White
                
                if ($data.duplicates.recent.Count -gt 0) {
                    Write-Host ""
                    Write-Host "üö® DUPLICADOS RECIENTES:" -ForegroundColor Red
                    foreach ($dup in $data.duplicates.recent) {
                        Write-Host "  ‚Ä¢ Factura: $($dup.numeroFactura) - Cantidad: $($dup.cantidad) - IDs: $($dup.ids)" -ForegroundColor Yellow
                    }
                }
                
                if ($data.duplicates.byNumber.Count -gt 0) {
                    Write-Host ""
                    Write-Host "üìã PRIMEROS 10 DUPLICADOS:" -ForegroundColor White
                    $top10 = $data.duplicates.byNumber | Select-Object -First 10
                    foreach ($dup in $top10) {
                        Write-Host "  ‚Ä¢ $($dup.numeroFactura): $($dup.cantidad) copias (IDs: $($dup.ids))" -ForegroundColor White
                    }
                }
            }
        } catch {
            Write-Host "‚ùå Error detectando duplicados: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    "remove-all" {
        Write-Host "‚ö†Ô∏è  ELIMINANDO TODOS LOS DUPLICADOS..." -ForegroundColor Red
        Write-Host "Esto conservar√° solo el registro m√°s reciente de cada factura." -ForegroundColor Yellow
        
        $confirm = Read-Host "¬øEst√°s seguro? (escribe 'SI' para continuar)"
        if ($confirm -eq "SI") {
            try {
                $response = Invoke-WebRequest -Uri "$BaseUrl/remove-all-duplicates" -Method POST
                $data = $response.Content | ConvertFrom-Json
                
                if ($data.success) {
                    Write-Host "‚úÖ Duplicados eliminados: $($data.deletedCount)" -ForegroundColor Green
                } else {
                    Write-Host "‚ùå Error: $($data.message)" -ForegroundColor Red
                }
            } catch {
                Write-Host "‚ùå Error eliminando duplicados: $($_.Exception.Message)" -ForegroundColor Red
            }
        } else {
            Write-Host "‚ùå Operaci√≥n cancelada." -ForegroundColor Yellow
        }
    }
    
    "remove-specific" {
        if ($NumeroFactura -eq "") {
            Write-Host "‚ùå Se requiere -NumeroFactura para eliminar duplicados espec√≠ficos" -ForegroundColor Red
            exit 1
        }
        
        Write-Host "üóëÔ∏è  Eliminando duplicados de factura: $NumeroFactura" -ForegroundColor Yellow
        
        try {
            $body = @{ numeroFactura = $NumeroFactura } | ConvertTo-Json
            $response = Invoke-WebRequest -Uri "$BaseUrl/remove-duplicates" -Method POST -Body $body -ContentType "application/json"
            $data = $response.Content | ConvertFrom-Json
            
            if ($data.success) {
                Write-Host "‚úÖ $($data.message)" -ForegroundColor Green
                Write-Host "üìä Registros eliminados: $($data.deletedCount)" -ForegroundColor White
            } else {
                Write-Host "‚ùå Error: $($data.message)" -ForegroundColor Red
            }
        } catch {
            Write-Host "‚ùå Error eliminando duplicados: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    default {
        Write-Host "‚ùå Acci√≥n no v√°lida. Usa: detect, remove-all, remove-specific" -ForegroundColor Red
        Write-Host ""
        Write-Host "üìñ EJEMPLOS DE USO:" -ForegroundColor White
        Write-Host "  .\manage-duplicates.ps1 -Action detect" -ForegroundColor Gray
        Write-Host "  .\manage-duplicates.ps1 -Action remove-specific -NumeroFactura 'FAC123'" -ForegroundColor Gray
        Write-Host "  .\manage-duplicates.ps1 -Action remove-all" -ForegroundColor Gray
    }
}

Write-Host ""
Write-Host "üîó Para m√°s ayuda, revisa el archivo DUPLICATES_MANAGEMENT.md" -ForegroundColor Cyan
